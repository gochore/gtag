package gtag

import (
	"testing"

	"github.com/google/go-cmp/cmp"
)

func Test_execute(t *testing.T) {
	type args struct {
		data templateData
	}
	tests := []struct {
		name string
		args args
		want string
	}{
		{
			name: "regular",
			args: args{
				data: templateData{
					Package: "test",
					Types: []templateDataType{
						{
							Name: "test",
							Fields: []templateDataTypeField{
								{
									Name: "A",
									Tag:  `json:"a"`,
								},
								{
									Name: "b",
									Tag:  ``,
								},
							},
						},
					},
					Tags: []templateDataTag{
						{
							Name:  "Json",
							Value: "json",
						},
						{
							Name:  "Bson",
							Value: "bson",
						},
					},
				},
			},
			want: `
// Code generated by gtag. DO NOT EDIT.
// See: https://github.com/wolfogre/gtag

//go:generate 
package test

import (
	"reflect"
	"strings"
)



var (
	valueOftest = test{}
	typeOftest  = reflect.TypeOf(valueOftest)


	_ = valueOftest.A
	fieldOftestA, _ = typeOftest.FieldByName("A")
	tagOftestA = fieldOftestA.Tag

	_ = valueOftest.b
	fieldOftestb, _ = typeOftest.FieldByName("b")
	tagOftestb = fieldOftestb.Tag

)

// testTags indicate tags of type test
type testTags struct {
	A string // json:"a"
	b string // 

	_tagsList []string
}

func (t *testTags) List() []string {
	return t._tagsList
}

// Tags return specified tags of test
func (*test) Tags(tag string, convert ...func(string) string) testTags {
	conv := func(in string) string { return strings.TrimSpace(strings.Split(in, ",")[0]) }
	if len(convert) > 0 {
		conv = convert[0]
	}
	if conv == nil {
		conv = func(in string) string { return in }
	}
	return testTags{
		A: conv(tagOftestA.Get(tag)),
		b: conv(tagOftestb.Get(tag)),
		_tagsList: []string{
			conv(tagOftestA.Get(tag)),
			conv(tagOftestb.Get(tag)),
		},
	}
}


// TagsJson is alias of Tags("json")
func (*test) TagsJson() testTags {
	var v *test
	return v.Tags("json")
}


// TagsBson is alias of Tags("bson")
func (*test) TagsBson() testTags {
	var v *test
	return v.Tags("bson")
}



`,
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			if got := string(execute(tt.args.data)); got != tt.want {
				t.Errorf("execute() = %v, want %v", got, tt.want)
				t.Error(cmp.Diff(got, tt.want))
			}
		})
	}
}
